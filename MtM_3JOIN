--Many:Many Relationships 
--EX. books <-> authors, blog post(content) <-> tags, students <-> classes

--exercise:TV show reviewing application (TV series data <---------reviews data---------->Reviewers data)

CREATE TABLE reviewers (
id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
firstName VARCHAR(100),
lastName VARCHAR(100));

CREATE TABLE series(
id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
title VARCHAR(100),
releaseYear YEAR(4),
genre VARCHAR(100));

INSERT INTO reviewers(firstName, lastName) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');
    
INSERT INTO series (title, releaseYear, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');


--CREATING REVIEWS TABLE
CREATE TABLE reviews(
id INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
rating DECIMAL(2,1),
seriesId INT,
reviewerId INT,
FOREIGN KEY(seriesId) REFERENCES series(id),
FOREIGN KEY(reviewerId) REFERENCES reviewers(id));

INSERT INTO reviews (seriesId, reviewerId,rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);
    
--JOIN TWO TABLES
SELECT * FROM series;
SELECT * FROM reviews;
    
SELECT title, rating FROM series JOIN reviews ON series.id=reviews.id;
--get avg rating by title
SELECT title, AVG(rating) AS avgRating FROM series JOIN reviews ON series.id=reviews.seriesId GROUP BY series.id ORDER BY avgRating;
--get reviewer's name and reviewed rating
SELECT * FROM reviewers;
SELECT * FROM reviews;

SELECT firstName, lastName, rating FROM reviewers INNER JOIN reviews ON reviewers.id=reviews.reviewerId;

--UNREVIEWED SERIES
SELECT title AS unreviewedSeries FROM series LEFT JOIN reviews ON series.id=reviews.seriesId WHERE rating IS NULL;

--avg. rating based on genre
SELECT genre, AVG(rating) AS avgRating FROM series INNER JOIN reviews ON series.id=reviews.seriesId GROUP by series.genre;
SELECT genre, ROUND(AVG(rating),2) AS avgRating FROM series INNER JOIN reviews ON series.id=reviews.seriesId GROUP by series.genre;

--reviewer stats
SELECT firstName, lastName, COUNT(rating) AS COUNT, IFNULL(MIN(rating),0) AS MIN, IFNULL(MAX(rating),0) AS MAX, IFNULL(AVG(rating),0) AS AVG, CASE WHEN COUNT(rating)=0 THEN 'ACTIVE' ELSE 'INACTIVE'END AS STATUS
FROM reviewers LEFT JOIN reviews ON reviewers.id=reviews.reviewerId GROUP BY reviewers.id;

SELECT firstName, lastName,
COUNT(rating) AS COUNT,
IFNULL(MIN(rating),0) AS MIN,
IFNULL(MAX(rating),0) AS MAX,
IFNULL(AVG(rating),0) AS AVG,
IF(COUNT(rating) >= 1, 'ACTIVE','INACTIVE') AS STATUS
FROM reviewers LEFT JOIN reviews ON reviewers.id=reviews.reviewerId GROUP BY reviewers.id;

SELECT firstName, lastName,
COUNT(rating) AS COUNT,
IFNULL(MIN(rating),0) AS MIN,
IFNULL(MAX(rating),0) AS MAX,
IFNULL(AVG(rating),0) AS AVG,
CASE WHEN COUNT(rating) >= 10 THEN 'POWER USER' WHEN COUNT(rating) > 0 THEN 'ACTIVE' ELSE 'INACTIVE' END AS STATUS
FROM reviewers LEFT JOIN reviews ON reviewers.id=reviews.reviewerId GROUP BY reviewers.id;

--JOIN 3 tables
SELECT title, rating, CONCAT(firstName,' ', lastName) AS reviewer FROM reviewers
INNER JOIN reviews ON reviewers.id=reviews.reviewerId
INNER JOIN series ON series.id=reviews.seriesId
ORDER BY title;
